(()=>{"use strict";function e(e,t){return this.row=e,this.col=t,{row:e,col:t,getPosString(){return`${this.row}, ${this.col}`}}}const t=[[1,2],[-1,2],[2,1],[-2,1],[-2,-1],[2,-1],[1,-2],[-1,-2]];function n(e,n){const o=[];for(let r of t){const t=e+r[0],s=n+r[1];t>0&&t<=8&&s>0&&s<=8&&o.push([t,s])}return o}const o=document.querySelector("form");o.addEventListener("submit",(t=>{t.preventDefault();const r=function(t,o){const r=[],s=new Set,l=new e(t[0],t[1]);r.push([l]);const c=new e(o[0],o[1]);for(;r.length;){const t=r.shift(),o=t[t.length-1];if(o.row===c.row&&o.col===c.col)return t.map((e=>[e.row,e.col]));s.add(o.getPosString());for(let l of n(o.row,o.col)){const n=new e(l[0],l[1]);s.has(n.getPosString())||r.push([...t,n])}if(!r.length)break}return null}(o.elements.start.value.split(",").map((e=>parseInt(e))),o.elements.target.value.split(",").map((e=>parseInt(e))));null===r?alert("Make sure the numbers are not higher than 8 - and separate them by comma.(n,n)"):function(e){const t=document.querySelector("#chessboard");t.innerHTML="";const n=document.createElement("table");for(let t=8;t>=1;t--){const o=document.createElement("tr");for(let n=1;n<=8;n++){const r=document.createElement("td");e.some((e=>e[0]===t&&e[1]===n))?r.style.backgroundColor="lightgreen":r.style.backgroundColor="white",r.innerText=`${n},${t}`,o.appendChild(r)}n.appendChild(o)}t.appendChild(n)}(r)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,